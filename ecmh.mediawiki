<pre>
  BIP: Ecmh
  Title: Elliptic Curve Multiset definition
  Author: Tomas van der Wansem <tomas@bitcrust.org>
  Created: 2018-02-01
  License: PD
</pre>

== Abstract ==

This BIP describes the construction of a multiset using elliptic curves. The multiset is a 32-byte value that is uniquely and determinstically
defined for a set of data elements, regardless of their order.

This spec does not in itself propose changes but can be referenced by other specification that rely on ECMH.

== Specification ==

We find the 32-byte multiset value of a set of elements. The set can be of any size and the elements are binary sequences of any size. The order of the elements of the set does not matter. Duplicate elements are possible, such that {a} is distinct from {a,a}.

We will use the secp256k1 elliptic curve <sup>[1]</sup>, and further refer to this as the curve, and its field as the field.  The ''point of a set'', P(''A''), is a point on the curve uniquelly defined for the set ''A'' as follows:

The point for an empty set, P({}), is defined to be the infinity point of the curve.

The point for a set with a single element P({''d''}) is calculated using the algorithm:

# Let ''n'' = 0
# Let ''x'' be SHA256 of the concatenation of 64-bits little-endian encoding of ''n'' and SHA256(''d''), thus SHA256(''n'',SHA56(''d''))
# If ''x'' is an element of the field and ''x''<sup>3</sup>+7 is a quadratic residue, then P({''d''}) = (''x'', (''x''<sup>3</sup>+7)<sup>1/2</sup>)
# Otherwise, increment ''n'' and continue from 2

We define the point of the union of two sets ''A'',''B'' using the group operation of the curve:

P(''A'' âˆª ''B'') = P(''A'') * P(''B'')

The multiset of an empty set is the 32-byte value of zero. The multiset of a non-empty set is SHA256 value of the 64-byte value composed of the 32-byte big-endian x-coordinate followed by the 32-byte big-endian y-coordinate of its point on the curve.


=== Notes ===

* The verification step 2 of the algorithm succeeds ~50% of the time, so the algorithm loops on average ''e'' times.
* The trivial implementation of the algorithm has no fixed runtime, and therefore does not attempt to hide the underlying data. It only cryptographically secures against finding sets a,b such that EMCH(a) == ECMH(b) and a != b.

* Faster algorithms have been proposed but only for different (char-2) curves which have weaker security properties.

* The recommended implementation uses non-normalized intermediate 96-byte values. Normalization of these values takes about twice as long as the ECMH operations itself. Hence, finding the ECMH of 2 values is relatively slow compared to finding the ECMH of a large set.

== Implementation ==

An implementation of the algoritm can be found here:

https://github.com/tomasvdw/secp256k1/tree/multiset/src/modules/multiset

== Test Vectors ==
    
    
    // ** Test-vectors d1,d2,d3. These are the serialized UTXO's from block 1,2,3 of mainnet:
    
    d1=982051fd1e4ba744bbbe680e1fee14677ba1a3c3540bf7b1cdb606e857233e0e000000000300f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac
    d2=d5fdcc541e25de1c7a5addedf24858b8bb665c9f36ef744ee42c316022c90f9b000000000500f2052a010000004341047211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073dee6c89064984f03385237d92167c13e236446b417ab79a0fcae412ae3316b77ac
    d3=44f672226090d85db9a9f2fbfe5f0f9609b387af7be5b7fbb7a1767c831c9e99000000000700f2052a0100000043410494b9d3e76c5b1629ecf97fff95d7a4bbdac87cc26099ada28066c6ff1eb9191223cd897194a08d0c2726c5747f1db49e8cf90e75dc3e3550ae9b30086f3cd5aaac
    
    // ** finding EC-point EC(d1) and Multiset Hash M(d1):
    SHA(d1) = 7005f672e1f98653a213a6c9b4c15f67c223733af213ca9c21287a33dc01c6ce
    // Trial 0 
    x = SHA(00000000,SHA(d1)) = 7207de9bb4da04734a4c9ceb74e33189d600fbb8153c6e1a2ea2d80c080b6d99
    // x^3+7 is not a quadratic residue
    // Trial 1
    x = SHA(01000000,SHA(d1)) = 77a4dad093cfb3e6b364547c35242637c95ab1681c80c24c420b8bf40d542b19
    // x^3+7 is a quadratic residue
    EC(d1) = (x,y) = (77a4dad093cfb3e6b364547c35242637c95ab1681c80c24c420b8bf40d542b19,c2ccde973e6c026b93087e455a3626b76b9dc8708fc8f30bc763cf20389c1dea)
    M(d1) = SHA(EC(d1)) = 5e294984c0b6ff1c897bdbb6f7cf3ef801e2f13bc73428aacdf8cb8d3bd2f0e5
    
    // ** finding EC-point EC(d2) and Multiset Hash M(d2):
    SHA(d2) = cb4c8633c4bf0b384a39da7f82f0d417ffedf593f80bd3506257a14a1335c718
    // Trial 0
    x = SHA(00000000,SHA(d2)) = 543d39048f66fa55184fe2fb26d9307a36e838bfdc4c8fbab51850a3e0ae6325
    // x^3+7 is a quadratic residue
    EC(d2) = (x,y) = (543d39048f66fa55184fe2fb26d9307a36e838bfdc4c8fbab51850a3e0ae6325,ab7387fe64e57fcce3b07791f4f68939e84c8a11216e6f67c66b2d2b17b25352)
    M(d2) = SHA(EC(d2)) = 937080b66c2b372d353988d6c09222788f88a5130a1332ebc1495aa3a7fab4fb
    
    // ** finding EC-point EC(d3) and Multiset Hash M(d3):
    SHA(d3) = bedb3acd5c6fbc5a9ae34ad851023c375dbba69a91aead86879b26bdd7404e6d
    // Trial 0
    x = SHA(00000000,SHA(d3)) = 2e15b7652af47b550eb5f3af8311894cb0c17c2aa9ce1f199b315b9dfff40f4d
    // x^3+7 is not a quadratic residue
    // Trial 1
    x = SHA(01000000,SHA(d3)) = e0eae6e8c4b112131469152f8c8f61d67767bca551d6d445890b9a12c580a2a5
    // x^3+7 is a quadratic residue
    EC(d3) = (x,y) (e0eae6e8c4b112131469152f8c8f61d67767bca551d6d445890b9a12c580a2a5,34d1086861bcee0e43816774acfea1c378e9c11ee59a8b866995575bb4ba8592)
    M(d3) = SHA(EC(d3)) = ddbf2f18afe0afa887285793a482a07fc22a462848367873d79d72a7330a9615
    
    // ** Finding combination M(d1,d2) = SHA(EC(d1,d2)) = SHA(EC(d1)+EC(d2))
    EC(d1,d2) = EC(d1)+EC(d2) = (x,y) = (1f10d60e54d860a7eb88026cfd57ac053c98de4a6b79b9d4cb4134da015adb60,94eedd42bdaf610011b7e3bd4d63d5fe7eccae1ac1d3b1d142aaab35d4069e77)
    M(d1,d2) = SHA(EC(d1,d2)) = 48098f4ca9bb5dac273e56316db6412369ed1fa8beb579570532d16347fefccc
    
    // ** Finding combination M(d1,d2,d3) = SHA(EC(d1,d2,d3)) = SHA(EC(d1,d2)+EC(d3))
    EC(d1,d2,d3) = EC(d1,d2)+EC(d3) = (x,y) = (87c62d00781adb4112b3d11bac2c3b78db3e1a1f7b4b0141865ebde002026a6a,8a9f7d8bdafcdff2f81dedc2a7ced13282eae364e2b07f2dd7d5ad69416a723d)
    M(d1,d2,d3) = SHA(EC(d1,d2,d3)) = 47fbdff4767c32a4ea74ca4386590f6222ee8396b8b4f00ef56e9b4943f42493
    
    Generate with https://github.com/tomasvdw/bitcoin-abc/commits/ecmh_dumpvectors
    

==Copyright==

This document is placed in the public domain.

== References ==

[1] https://en.bitcoin.it/wiki/Secp256k1

[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html

[3] https://lists.linuxfoundation.org/pipermail/bitcoin-ml/2017-September/000240.html

[4] https://eprint.iacr.org/2009/226.pdf
